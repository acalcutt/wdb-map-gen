# SOME DESCRIPTIVE TITLE.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: PostGIS\n"
"Report-Msgid-Bugs-To: https://bugs.kde.org\n"
"POT-Creation-Date: 2020-12-15 04:51+0000\n"
"PO-Revision-Date: 2013-11-27 16:31+0000\n"
"Last-Translator: Sandro Santilli <strk@kbt.io>\n"
"Language-Team: Polish (http://www.transifex.com/projects/p/postgis-1/"
"language/pl/)\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 "
"|| n%100>=20) ? 1 : 2);\n"

#. Tag: title
#: using_postgis_dataman.xml:3
#, no-c-format
msgid "Data Management"
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:6
#, no-c-format
msgid "GIS Objects"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:8
#, no-c-format
msgid ""
"The GIS objects supported by PostGIS are a superset of the \"Simple Features"
"\" standard defined by the OpenGIS Consortium (OGC). PostGIS supports all "
"the objects and functions specified in the OGC \"Simple Features for SQL\" "
"specification (SFS)."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:13
#, no-c-format
msgid ""
"PostGIS extends the standard with support for embedded SRID information."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:16
#, no-c-format
msgid "OpenGIS WKB and WKT"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:18
#, no-c-format
msgid ""
"The OpenGIS specification defines two standard ways of expressing spatial "
"objects: the Well-Known Text (WKT) form and the Well-Known Binary (WKB) "
"form. Both WKT and WKB include information about the type of the object and "
"the coordinates which form the object."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:23
#, no-c-format
msgid ""
"Examples of the text representations (WKT) of the spatial objects of the "
"features are as follows:"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:28
#, no-c-format
msgid "POINT(0 0)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:32
#, no-c-format
msgid "POINT Z (0 0 0)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:36
#, no-c-format
msgid "POINT ZM (0 0 0 0)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:40
#, no-c-format
msgid "LINESTRING(0 0,1 1,1 2)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:44
#, no-c-format
msgid "POLYGON((0 0,4 0,4 4,0 4,0 0),(1 1, 2 1, 2 2, 1 2,1 1))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:48
#, no-c-format
msgid "MULTIPOINT((0 0),(1 2))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:52
#, no-c-format
msgid "MULTIPOINT Z ((0 0 0),(1 2 3))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:56
#, no-c-format
msgid "MULTILINESTRING((0 0,1 1,1 2),(2 3,3 2,5 4))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:60
#, no-c-format
msgid ""
"MULTIPOLYGON(((0 0,4 0,4 4,0 4,0 0),(1 1,2 1,2 2,1 2,1 1)), ((-1 -1,-1 -2,-2 "
"-2,-2 -1,-1 -1)))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:65
#, no-c-format
msgid "GEOMETRYCOLLECTION(POINT(2 3),LINESTRING(2 3,3 4))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:69
#, no-c-format
msgid ""
"The OpenGIS specification also requires that the internal storage format of "
"spatial objects include a spatial referencing system identifier (SRID). The "
"SRID is required when creating spatial objects for insertion into the "
"database."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:74
#, no-c-format
msgid ""
"Input/Output of these formats are available using the following interfaces:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:77
#, no-c-format
msgid ""
"bytea WKB = ST_AsBinary(geometry);\n"
"text WKT = ST_AsText(geometry);\n"
"geometry = ST_GeomFromWKB(bytea WKB, SRID);\n"
"geometry = ST_GeometryFromText(text WKT, SRID);"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:79
#, no-c-format
msgid ""
"For example, a valid insert statement to create and insert an OGC spatial "
"object would be:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:82
#, no-c-format
msgid ""
"INSERT INTO geotable ( the_geom, the_name )\n"
"  VALUES ( ST_GeomFromText('POINT(-126.4 45.32)', 312), 'A Place');"
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:86
#, no-c-format
msgid "PostGIS EWKB, EWKT and Canonical Forms"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:88
#, no-c-format
msgid ""
"First OpenGIS specifications (prior to 1.2.0) only support 2D geometries, "
"and the associated SRID is *never* embedded in the input/output "
"representations."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:91
#, no-c-format
msgid ""
"Even though the last OpenGIS specification 1.2.1 supports 3DM and 3DZ "
"coordinates specifing ZM qualifiers, it does not include yet the associated "
"SRID in the input/output representations."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:95
#, no-c-format
msgid ""
"PostGIS extended formats add 3DM, 3DZ, 4D coordinates support and embedded "
"SRID information. However, PostGIS EWKB/EWKT outputs have several "
"peculiarities:"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:100
#, no-c-format
msgid "For 3DZ geometries they will drop the Z qualifier:"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:101
#, no-c-format
msgid "OpenGIS: POINT Z (1 2 3)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:102
#, no-c-format
msgid "EWKB/EWKT: POINT(1 2 3)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:105
#, no-c-format
msgid "For 3DM geometries they will keep the M qualifier:"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:106
#, no-c-format
msgid "OpenGIS: POINT M (1 2 3)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:107
#, no-c-format
msgid "EWKB/EWKT: POINTM(1 2 3)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:110
#, no-c-format
msgid "For 4D geometries they will drop the ZM qualifiers:"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:111
#, no-c-format
msgid "OpenGIS: POINT ZM (1 2 3 4)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:112
#, no-c-format
msgid "EWKB/EWKT: POINT(1 2 3 4)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:116
#, no-c-format
msgid ""
"By doing this, PostGIS EWKB/EWKT avoids over-specifying dimensionality and a "
"whole categories of potential errors that ISO admits, e.g.:"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:121
#, no-c-format
msgid "POINT ZM (1 1)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:124
#, no-c-format
msgid "POINT ZM (1 1 1)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:127
#, no-c-format
msgid "POINT (1 1 1 1)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:132
#, no-c-format
msgid ""
"PostGIS extended formats are currently superset of the OGC one (every valid "
"WKB/WKT is a valid EWKB/EWKT) but this might vary in the future, "
"specifically if OGC comes out with a new format conflicting with our "
"extensions. Thus you SHOULD NOT rely on this feature!"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:137
#, no-c-format
msgid ""
"Examples of the text representations (EWKT) of the extended spatial objects "
"of the features are as follows."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:142
#, no-c-format
msgid "POINT(0 0 0) -- XYZ"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:146
#, no-c-format
msgid "SRID=32632;POINT(0 0) -- XY with SRID"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:150
#, no-c-format
msgid "POINTM(0 0 0) -- XYM"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:154
#, no-c-format
msgid "POINT(0 0 0 0) -- XYZM"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:158
#, no-c-format
msgid "SRID=4326;MULTIPOINTM(0 0 0,1 2 1) -- XYM with SRID"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:162
#, no-c-format
msgid "MULTILINESTRING((0 0 0,1 1 0,1 2 1),(2 3 1,3 2 1,5 4 1))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:167
#, no-c-format
msgid ""
"POLYGON((0 0 0,4 0 0,4 4 0,0 4 0,0 0 0),(1 1 0,2 1 0,2 2 0,1 2 0,1 1 0))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:172
#, no-c-format
msgid ""
"MULTIPOLYGON(((0 0 0,4 0 0,4 4 0,0 4 0,0 0 0),(1 1 0,2 1 0,2 2 0,1 2 0,1 1 "
"0)),((-1 -1 0,-1 -2 0,-2 -2 0,-2 -1 0,-1 -1 0)))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:177
#, no-c-format
msgid "GEOMETRYCOLLECTIONM( POINTM(2 3 9), LINESTRINGM(2 3 4, 3 4 5) )"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:181
#, no-c-format
msgid "MULTICURVE( (0 0, 5 5), CIRCULARSTRING(4 0, 4 4, 8 4) )"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:185
#, no-c-format
msgid ""
"POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 "
"1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 0, 1 1 1, "
"1 0 1, 1 0 0, 1 1 0)), ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 "
"1, 1 1 1, 0 1 1, 0 0 1)) )"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:191
#, no-c-format
msgid "TRIANGLE ((0 0, 0 9, 9 0, 0 0))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:195
#, no-c-format
msgid "TIN( ((0 0 0, 0 0 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 0 0 0)) )"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:200
#, no-c-format
msgid ""
"Conversion between these formats is available using the following interfaces:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:202
#, no-c-format
msgid ""
"bytea EWKB = ST_AsEWKB(geometry);\n"
"text EWKT = ST_AsEWKT(geometry);\n"
"geometry = ST_GeomFromEWKB(bytea EWKB);\n"
"geometry = ST_GeomFromEWKT(text EWKT);"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:204
#, no-c-format
msgid ""
"For example, a valid insert statement to create and insert a PostGIS spatial "
"object would be:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:207
#, no-c-format
msgid ""
"INSERT INTO geotable ( the_geom, the_name )\n"
"  VALUES ( ST_GeomFromEWKT('SRID=312;POINTM(-126.4 45.32 15)'), 'A Place' )"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:209
#, no-c-format
msgid ""
"The \"canonical forms\" of a PostgreSQL type are the representations you get "
"with a simple query (without any function call) and the one which is "
"guaranteed to be accepted with a simple insert, update or copy. For the "
"PostGIS 'geometry' type these are:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:213
#, no-c-format
msgid ""
"- Output\n"
"  - binary: EWKB\n"
"        ascii: HEXEWKB (EWKB in hex form)\n"
"- Input\n"
"  - binary: EWKB\n"
"        ascii: HEXEWKB|EWKT"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:215
#, no-c-format
msgid ""
"For example this statement reads EWKT and returns HEXEWKB in the process of "
"canonical ascii input/output:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:218
#, no-c-format
msgid ""
"=# SELECT 'SRID=4;POINT(0 0)'::geometry;\n"
"\n"
"geometry\n"
"----------------------------------------------------\n"
"01010000200400000000000000000000000000000000000000\n"
"(1 row)"
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:221
#, no-c-format
msgid "SQL-MM Part 3"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:223
#, no-c-format
msgid ""
"The SQL Multimedia Applications Spatial specification extends the simple "
"features for SQL spec by defining a number of circularly interpolated curves."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:227
#, no-c-format
msgid ""
"The SQL-MM definitions include 3DM, 3DZ and 4D coordinates, but do not allow "
"the embedding of SRID information."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:230
#, no-c-format
msgid ""
"The Well-Known Text extensions are not yet fully supported. Examples of some "
"simple curved geometries are shown below:"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:235
#, no-c-format
msgid "CIRCULARSTRING(0 0, 1 1, 1 0)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:236
#, no-c-format
msgid "CIRCULARSTRING(0 0, 4 0, 4 4, 0 4, 0 0)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:237
#, no-c-format
msgid ""
"The CIRCULARSTRING is the basic curve type, similar to a LINESTRING in the "
"linear world. A single segment required three points, the start and end "
"points (first and third) and any other point on the arc. The exception to "
"this is for a closed circle, where the start and end points are the same. In "
"this case the second point MUST be the center of the arc, ie the opposite "
"side of the circle. To chain arcs together, the last point of the previous "
"arc becomes the first point of the next arc, just like in LINESTRING. This "
"means that a valid circular string must have an odd number of points greater "
"than 1."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:250
#, no-c-format
msgid "COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:251
#, no-c-format
msgid ""
"A compound curve is a single, continuous curve that has both curved "
"(circular) segments and linear segments. That means that in addition to "
"having well-formed components, the end point of every component (except the "
"last) must be coincident with the start point of the following component."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:259
#, no-c-format
msgid ""
"CURVEPOLYGON(CIRCULARSTRING(0 0, 4 0, 4 4, 0 4, 0 0),(1 1, 3 3, 3 1, 1 1))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:261
#, no-c-format
msgid ""
"Example compound curve in a curve polygon: "
"CURVEPOLYGON(COMPOUNDCURVE(CIRCULARSTRING(0 0,2 0, 2 1, 2 3, 4 3),(4 3, 4 5, "
"1 4, 0 0)), CIRCULARSTRING(1.7 1, 1.4 0.4, 1.6 0.4, 1.6 0.5, 1.7 1) )"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:265
#, no-c-format
msgid ""
"A CURVEPOLYGON is just like a polygon, with an outer ring and zero or more "
"inner rings. The difference is that a ring can take the form of a circular "
"string, linear string or compound string."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:269
#, no-c-format
msgid "As of PostGIS 1.4 PostGIS supports compound curves in a curve polygon."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:273
#, no-c-format
msgid "MULTICURVE((0 0, 5 5),CIRCULARSTRING(4 0, 4 4, 8 4))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:274
#, no-c-format
msgid ""
"The MULTICURVE is a collection of curves, which can include linear strings, "
"circular strings or compound strings."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:279
#, no-c-format
msgid ""
"MULTISURFACE(CURVEPOLYGON(CIRCULARSTRING(0 0, 4 0, 4 4, 0 4, 0 0),(1 1, 3 3, "
"3 1, 1 1)),((10 10, 14 12, 11 10, 10 10),(11 11, 11.5 11, 11 11.5, 11 11)))"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:282
#, no-c-format
msgid ""
"This is a collection of surfaces, which can be (linear) polygons or curve "
"polygons."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:288
#, no-c-format
msgid ""
"All floating point comparisons within the SQL-MM implementation are "
"performed to a specified tolerance, currently 1E-8."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:294
#, no-c-format
msgid "PostGIS Geography Type"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:296
#, no-c-format
msgid ""
"The geography type provides native support for spatial features represented "
"on \"geographic\" coordinates (sometimes called \"geodetic\" coordinates, or "
"\"lat/lon\", or \"lon/lat\"). Geographic coordinates are spherical "
"coordinates expressed in angular units (degrees)."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:298
#, no-c-format
msgid ""
"The basis for the PostGIS geometry type is a plane. The shortest path "
"between two points on the plane is a straight line. That means calculations "
"on geometries (areas, distances, lengths, intersections, etc) can be "
"calculated using cartesian mathematics and straight line vectors."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:300
#, no-c-format
msgid ""
"The basis for the PostGIS geographic type is a sphere. The shortest path "
"between two points on the sphere is a great circle arc. That means that "
"calculations on geographies (areas, distances, lengths, intersections, etc) "
"must be calculated on the sphere, using more complicated mathematics. For "
"more accurate measurements, the calculations must take the actual spheroidal "
"shape of the world into account."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:302
#, no-c-format
msgid ""
"Because the underlying mathematics is much more complicated, there are fewer "
"functions defined for the geography type than for the geometry type. Over "
"time, as new algorithms are added, the capabilities of the geography type "
"will expand."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:304
#, no-c-format
msgid ""
"It uses a data type called <varname>geography</varname>. None of the GEOS "
"functions support the <varname>geography</varname> type. As a workaround one "
"can convert back and forth between geometry and geography types."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:307
#, no-c-format
msgid ""
"Prior to PostGIS 2.2, the geography type only supported WGS 84 long lat "
"(SRID:4326). For PostGIS 2.2 and above, any long/lat based spatial reference "
"system defined in the <varname>spatial_ref_sys</varname> table can be used. "
"You can even add your own custom spheroidal spatial reference system as "
"described in <ulink url=\"http://www.bostongis.com/blog/index.php?/"
"archives/266-geography-type-is-not-limited-to-earth.html\">geography type is "
"not limited to earth</ulink>."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:311
#, no-c-format
msgid ""
"Regardless which spatial reference system you use, the units returned by the "
"measurement (<xref linkend=\"ST_Distance\"/>, <xref linkend=\"ST_Length\"/>, "
"<xref linkend=\"ST_Perimeter\"/>, <xref linkend=\"ST_Area\"/>) and for input "
"of <xref linkend=\"ST_DWithin\"/> are in meters."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:313
#, no-c-format
msgid ""
"The geography type uses the PostgreSQL typmod definition format so that a "
"table with a geography field can be added in a single step. All the standard "
"OGC formats except for curves are supported."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:317
#, no-c-format
msgid "Geography Basics"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:318
#, no-c-format
msgid ""
"The geography type does not support curves, TINS, or POLYHEDRALSURFACEs, but "
"other geometry types are supported. Standard geometry type data will "
"autocast to geography if it is of SRID 4326. You can also use the EWKT and "
"EWKB conventions to insert data."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:323
#, no-c-format
msgid ""
"POINT: Creating a table with 2D point geography when srid is not specified "
"defaults to 4326 WGS 84 long lat:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:324
#, no-c-format
msgid "CREATE TABLE ptgeogwgs(gid serial PRIMARY KEY, geog geography(POINT) );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:325
#, no-c-format
msgid "POINT: Creating a table with 2D point geography in NAD83 longlat:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:326
#, no-c-format
msgid ""
"CREATE TABLE ptgeognad83(gid serial PRIMARY KEY, geog "
"geography(POINT,4269) );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:327
#, no-c-format
msgid "Creating a table with z coordinate point and explicitly specifying srid"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:328
#, no-c-format
msgid ""
"CREATE TABLE ptzgeogwgs84(gid serial PRIMARY KEY, geog "
"geography(POINTZ,4326) );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:331
#, no-c-format
msgid "LINESTRING"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:332
#, no-c-format
msgid ""
"CREATE TABLE lgeog(gid serial PRIMARY KEY, geog geography(LINESTRING) );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:335
#, no-c-format
msgid "POLYGON"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:336
#, no-c-format
msgid ""
"--polygon NAD 1927 long lat\n"
"CREATE TABLE lgeognad27(gid serial PRIMARY KEY, geog "
"geography(POLYGON,4267) );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:339
#, no-c-format
msgid "MULTIPOINT"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:342
#, no-c-format
msgid "MULTILINESTRING"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:345
#, no-c-format
msgid "MULTIPOLYGON"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:348
#, no-c-format
msgid "GEOMETRYCOLLECTION"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:352
#, no-c-format
msgid ""
"The geography fields get registered in the <varname>geography_columns</"
"varname> system view."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:354
#, no-c-format
msgid ""
"Now, check the \"geography_columns\" view and see that your table is listed."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:356
#, no-c-format
msgid ""
"You can create a new table with a GEOGRAPHY column using the CREATE TABLE "
"syntax."
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:359
#, no-c-format
msgid ""
"CREATE TABLE global_points (\n"
"    id SERIAL PRIMARY KEY,\n"
"    name VARCHAR(64),\n"
"    location GEOGRAPHY(POINT,4326)\n"
"  );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:362
#, no-c-format
msgid ""
"Note that the location column has type GEOGRAPHY and that geography type "
"supports two optional modifiers: a type modifier that restricts the kind of "
"shapes and dimensions allowed in the column; an SRID modifier that restricts "
"the coordinate reference identifier to a particular number."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:363
#, no-c-format
msgid ""
"Allowable values for the type modifier are: POINT, LINESTRING, POLYGON, "
"MULTIPOINT, MULTILINESTRING, MULTIPOLYGON. The modifier also supports "
"dimensionality restrictions through suffixes: Z, M and ZM. So, for example a "
"modifier of 'LINESTRINGM' would only allow line strings with three "
"dimensions in, and would treat the third dimension as a measure. Similarly, "
"'POINTZM' would expect four dimensional data."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:365
#, no-c-format
msgid ""
"If you do not specify an SRID, the SRID will default to 4326 WGS 84 long/lat "
"will be used, and all calculations will proceed using WGS84."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:366
#, no-c-format
msgid ""
"Once you have created your table, you can see it in the GEOGRAPHY_COLUMNS "
"table:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:367
#, no-c-format
msgid ""
"-- See the contents of the metadata view\n"
"SELECT * FROM geography_columns;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:369
#, no-c-format
msgid ""
"You can insert data into the table the same as you would if it was using a "
"GEOMETRY column:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:371
#, no-c-format
msgid ""
"-- Add some data into the test table\n"
"INSERT INTO global_points (name, location) VALUES ('Town', 'SRID=4326;"
"POINT(-110 30)');\n"
"INSERT INTO global_points (name, location) VALUES ('Forest', 'SRID=4326;"
"POINT(-109 29)');\n"
"INSERT INTO global_points (name, location) VALUES ('London', 'SRID=4326;"
"POINT(0 49)');"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:373
#, no-c-format
msgid ""
"Creating an index works the same as GEOMETRY. PostGIS will note that the "
"column type is GEOGRAPHY and create an appropriate sphere-based index "
"instead of the usual planar index used for GEOMETRY."
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:376
#, no-c-format
msgid ""
"-- Index the test table with a spherical index\n"
"  CREATE INDEX global_points_gix ON global_points USING GIST ( location );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:379
#, no-c-format
msgid ""
"Query and measurement functions use units of meters. So distance parameters "
"should be expressed in meters, and return values should be expected in "
"meters (or square meters for areas)."
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:381
#, no-c-format
msgid ""
"-- Show a distance query and note, London is outside the 1000km tolerance\n"
"  SELECT name FROM global_points WHERE ST_DWithin(location, 'SRID=4326;"
"POINT(-110 29)'::geography, 1000000);"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:384
#, no-c-format
msgid ""
"You can see the power of GEOGRAPHY in action by calculating how close a "
"plane flying from Seattle to London (LINESTRING(-122.33 47.606, 0.0 51.5)) "
"comes to Reykjavik (POINT(-21.96 64.15))."
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:386
#, no-c-format
msgid ""
"-- Distance calculation using GEOGRAPHY (122.2km)\n"
"  SELECT ST_Distance('LINESTRING(-122.33 47.606, 0.0 51.5)'::geography, "
"'POINT(-21.96 64.15)'::geography);"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:389
#, no-c-format
msgid ""
"-- Distance calculation using GEOMETRY (13.3 \"degrees\")\n"
"  SELECT ST_Distance('LINESTRING(-122.33 47.606, 0.0 51.5)'::geometry, "
"'POINT(-21.96 64.15)'::geometry);"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:392
#, no-c-format
msgid ""
"Testing different lon/lat projects. Any long lat spatial reference system "
"listed in <varname>spatial_ref_sys</varname> table is allowed."
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:394
#, no-c-format
msgid ""
"-- NAD 83 lon/lat\n"
"SELECT 'SRID=4269;POINT(-123 34)'::geography;\n"
"                    geography\n"
"----------------------------------------------------\n"
" 0101000020AD1000000000000000C05EC00000000000004140\n"
"(1 row)"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:396
#, no-c-format
msgid ""
"-- NAD27 lon/lat\n"
"SELECT 'SRID=4267;POINT(-123 34)'::geography;\n"
"\n"
"                    geography\n"
"----------------------------------------------------\n"
" 0101000020AB1000000000000000C05EC00000000000004140\n"
"(1 row)"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:398
#, no-c-format
msgid ""
"-- NAD83 UTM zone meters, yields error since its a meter based projection\n"
"SELECT 'SRID=26910;POINT(-123 34)'::geography;\n"
"\n"
"ERROR:  Only lon/lat coordinate systems are supported in geography.\n"
"LINE 1: SELECT 'SRID=26910;POINT(-123 34)'::geography;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:400
#, no-c-format
msgid ""
"The GEOGRAPHY type calculates the true shortest distance over the sphere "
"between Reykjavik and the great circle flight path between Seattle and "
"London."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:402
#, no-c-format
msgid ""
"<ulink url=\"http://gc.kls2.com/cgi-bin/gc?PATH=SEA-LHR\">Great Circle "
"mapper</ulink> The GEOMETRY type calculates a meaningless cartesian distance "
"between Reykjavik and the straight line path from Seattle to London plotted "
"on a flat map of the world. The nominal units of the result might be called "
"\"degrees\", but the result doesn't correspond to any true angular "
"difference between the points, so even calling them \"degrees\" is "
"inaccurate."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:406
#, no-c-format
msgid "When to use Geography Data type over Geometry data type"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:407
#, no-c-format
msgid ""
"The geography type allows you to store data in longitude/latitude "
"coordinates, but at a cost: there are fewer functions defined on GEOGRAPHY "
"than there are on GEOMETRY; those functions that are defined take more CPU "
"time to execute."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:408
#, no-c-format
msgid ""
"The type you choose should be conditioned on the expected working area of "
"the application you are building. Will your data span the globe or a large "
"continental area, or is it local to a state, county or municipality?"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:410
#, no-c-format
msgid ""
"If your data is contained in a small area, you might find that choosing an "
"appropriate projection and using GEOMETRY is the best solution, in terms of "
"performance and functionality available."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:411
#, no-c-format
msgid ""
"If your data is global or covers a continental region, you may find that "
"GEOGRAPHY allows you to build a system without having to worry about "
"projection details. You store your data in longitude/latitude, and use the "
"functions that have been defined on GEOGRAPHY."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:413
#, no-c-format
msgid ""
"If you don't understand projections, and you don't want to learn about them, "
"and you're prepared to accept the limitations in functionality available in "
"GEOGRAPHY, then it might be easier for you to use GEOGRAPHY than GEOMETRY. "
"Simply load your data up as longitude/latitude and go from there."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:416
#, no-c-format
msgid ""
"Refer to <xref linkend=\"PostGIS_TypeFunctionMatrix\"/> for compare between "
"what is supported for Geography vs. Geometry. For a brief listing and "
"description of Geography functions, refer to <xref linkend="
"\"PostGIS_GeographyFunctions\"/>"
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:422
#, no-c-format
msgid "Geography Advanced FAQ"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:426
#, no-c-format
msgid "Do you calculate on the sphere or the spheroid?"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:430
#, no-c-format
msgid ""
"By default, all distance and area calculations are done on the spheroid. You "
"should find that the results of calculations in local areas match up will "
"with local planar results in good local projections. Over larger areas, the "
"spheroidal calculations will be more accurate than any calculation done on a "
"projected plane."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:433
#, no-c-format
msgid ""
"All the geography functions have the option of using a sphere calculation, "
"by setting a final boolean parameter to 'FALSE'. This will somewhat speed up "
"calculations, particularly for cases where the geometries are very simple."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:439
#, no-c-format
msgid "What about the date-line and the poles?"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:443
#, no-c-format
msgid ""
"All the calculations have no conception of date-line or poles, the "
"coordinates are spherical (longitude/latitude) so a shape that crosses the "
"dateline is, from a calculation point of view, no different from any other "
"shape."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:451
#, no-c-format
msgid "What is the longest arc you can process?"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:455
#, no-c-format
msgid ""
"We use great circle arcs as the \"interpolation line\" between two points. "
"That means any two points are actually joined up two ways, depending on "
"which direction you travel along the great circle. All our code assumes that "
"the points are joined by the *shorter* of the two paths along the great "
"circle. As a consequence, shapes that have arcs of more than 180 degrees "
"will not be correctly modelled."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:462
#, no-c-format
msgid ""
"Why is it so slow to calculate the area of Europe / Russia / insert big "
"geographic region here ?"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:466
#, no-c-format
msgid ""
"Because the polygon is so darned huge! Big areas are bad for two reasons: "
"their bounds are huge, so the index tends to pull the feature no matter what "
"query you run; the number of vertices is huge, and tests (distance, "
"containment) have to traverse the vertex list at least once and sometimes N "
"times (with N being the number of vertices in the other candidate feature)."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:471
#, no-c-format
msgid ""
"As with GEOMETRY, we recommend that when you have very large polygons, but "
"are doing queries in small areas, you \"denormalize\" your geometric data "
"into smaller chunks so that the index can effectively subquery parts of the "
"object and so queries don't have to pull out the whole object every time. "
"Please consult <xref linkend=\"ST_Subdivide\"/> function documentation. Just "
"because you *can* store all of Europe in one polygon doesn't mean you "
"*should*."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:480
#, no-c-format
msgid "Spatial Metadata Tables"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:482
#, no-c-format
msgid ""
"The OpenGIS \"Simple Features Specification for SQL\" defines some metadata "
"tables to describe geometry table structure and coordinate systems. In order "
"to ensure that metadata remains consistent, operations such as creating and "
"removing a spatial column are carried out through special procedures defined "
"by OpenGIS."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:488
#, no-c-format
msgid ""
"There are two OpenGIS meta-data tables: <varname>SPATIAL_REF_SYS</varname> "
"and <varname>GEOMETRY_COLUMNS</varname>. The <varname>SPATIAL_REF_SYS</"
"varname> table holds the numeric IDs and textual descriptions of coordinate "
"systems used in the spatial database."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:495
#, no-c-format
msgid "The SPATIAL_REF_SYS Table and Spatial Reference Systems"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:497
#, no-c-format
msgid ""
"The <varname>SPATIAL_REF_SYS</varname> table used by PostGIS is an OGC-"
"compliant database table that lists over 3000 known <ulink url=\"https://en."
"wikipedia.org/wiki/Spatial_reference_system\">spatial reference systems</"
"ulink> and details needed to transform (reproject) between them."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:502
#, no-c-format
msgid ""
"The PostGIS <varname>SPATIAL_REF_SYS</varname> table contains over 3000 of "
"the most common spatial reference system definitions that are handled by the "
"<ulink url=\"https://proj.org\">PROJ</ulink> projection library. But there "
"are many coordinate systems that it does not contain. You can define your "
"own custom spatial reference system if you are familiar with PROJ "
"constructs. Keep in mind that most spatial reference systems are regional "
"and have no meaning when used outside of the bounds they were intended for."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:510
#, no-c-format
msgid ""
"A resource for finding spatial reference systems not defined in the core set "
"is <ulink url=\"http://spatialreference.org/\">http://spatialreference.org/</"
"ulink>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:512
#, no-c-format
msgid ""
"Some commonly used spatial reference systems are: <ulink url=\"http://"
"spatialreference.org/ref/epsg/4326/\">4326 - WGS 84 Long Lat</ulink>, <ulink "
"url=\"http://spatialreference.org/ref/epsg/4269/\">4269 - NAD 83 Long Lat</"
"ulink>, <ulink url=\"http://spatialreference.org/ref/epsg/3395/\">3395 - WGS "
"84 World Mercator</ulink>, <ulink url=\"http://spatialreference.org/ref/"
"epsg/2163/\">2163 - US National Atlas Equal Area</ulink>, and the 60 WGS84 "
"UTM zones. UTM zones are one of the most ideal for measurement, but only "
"cover 6-degree regions. (To determine which UTM zone to use for your area of "
"interest, see the <ulink url=\"http://trac.osgeo.org/postgis/wiki/"
"UsersWikiplpgsqlfunctionsDistance\">utmzone PostGIS plpgsql helper function</"
"ulink>.)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:521
#, no-c-format
msgid ""
"US states use State Plane spatial reference systems (meter or feet based) - "
"usually one or 2 exists per state. Most of the meter-based ones are in the "
"core set, but many of the feet-based ones or ESRI created ones will need to "
"be copied from <ulink url=\"http://spatialreference.org\">spatialreference."
"org</ulink>."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:527
#, no-c-format
msgid ""
"You can even define non-Earth-based coordinate systems, such as <ulink url="
"\"http://spatialreference.org/ref/iau2000/mars-2000/\">Mars 2000</ulink> "
"This Mars coordinate system is non-planar (it's in degrees spheroidal), but "
"you can use it with the <varname>geography</varname> type to obtain length "
"and proximity measurements in meters instead of degrees."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:532
#, no-c-format
msgid "The <varname>SPATIAL_REF_SYS</varname> table definition is:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:534
#, no-c-format
msgid ""
"CREATE TABLE spatial_ref_sys (\n"
"  srid       INTEGER NOT NULL PRIMARY KEY,\n"
"  auth_name  VARCHAR(256),\n"
"  auth_srid  INTEGER,\n"
"  srtext     VARCHAR(2048),\n"
"  proj4text  VARCHAR(2048)\n"
")"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:536 using_postgis_dataman.xml:619
#, no-c-format
msgid "The columns are:"
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:540 using_postgis_dataman.xml:652
#, no-c-format
msgid "SRID"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:543
#, no-c-format
msgid ""
"An integer code that uniquely identifies the <ulink url=\"http://en."
"wikipedia.org/wiki/SRID\">Spatial Reference System</ulink> (SRS) within the "
"database."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:549
#, no-c-format
msgid "AUTH_NAME"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:552
#, no-c-format
msgid ""
"The name of the standard or standards body that is being cited for this "
"reference system. For example, \"EPSG\" is a valid <varname>AUTH_NAME</"
"varname>."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:559
#, no-c-format
msgid "AUTH_SRID"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:562
#, no-c-format
msgid ""
"The ID of the Spatial Reference System as defined by the Authority cited in "
"the <varname>AUTH_NAME</varname>. In the case of EPSG, this is where the "
"EPSG projection code would go."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:569
#, no-c-format
msgid "SRTEXT"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:572
#, no-c-format
msgid ""
"The Well-Known Text representation of the Spatial Reference System. An "
"example of a WKT SRS representation is:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:575
#, no-c-format
msgid ""
"PROJCS[\"NAD83 / UTM Zone 10N\",\n"
"  GEOGCS[\"NAD83\",\n"
"        DATUM[\"North_American_Datum_1983\",\n"
"          SPHEROID[\"GRS 1980\",6378137,298.257222101]\n"
"        ],\n"
"        PRIMEM[\"Greenwich\",0],\n"
"        UNIT[\"degree\",0.0174532925199433]\n"
"  ],\n"
"  PROJECTION[\"Transverse_Mercator\"],\n"
"  PARAMETER[\"latitude_of_origin\",0],\n"
"  PARAMETER[\"central_meridian\",-123],\n"
"  PARAMETER[\"scale_factor\",0.9996],\n"
"  PARAMETER[\"false_easting\",500000],\n"
"  PARAMETER[\"false_northing\",0],\n"
"  UNIT[\"metre\",1]\n"
"]"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:577
#, no-c-format
msgid ""
"For a listing of EPSG projection codes and their corresponding WKT "
"representations, see <ulink url=\"http://www.opengeospatial.org/\">http://"
"www.opengeospatial.org/</ulink>. For a discussion of SRS WKT in general, see "
"the OpenGIS \"Coordinate Transformation Services Implementation Specification"
"\" at <ulink url=\"http://www.opengeospatial.org/standards\">http://www."
"opengeospatial.org/standards</ulink>. For information on the European "
"Petroleum Survey Group (EPSG) and their database of spatial reference "
"systems, see <ulink url=\"http://www.epsg.org/\">http://www.epsg.org</ulink>."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:590
#, no-c-format
msgid "PROJ4TEXT"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:593
#, no-c-format
msgid ""
"PostGIS uses the PROJ library to provide coordinate transformation "
"capabilities. The <varname>PROJ4TEXT</varname> column contains the Proj4 "
"coordinate definition string for a particular SRID. For example:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:598
#, no-c-format
msgid "+proj=utm +zone=10 +ellps=clrk66 +datum=NAD27 +units=m"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:600
#, no-c-format
msgid ""
"For more information see the <ulink url=\"https://proj.org/\">Proj4 web "
"site</ulink>. The <filename>spatial_ref_sys.sql</filename> file contains "
"both <varname>SRTEXT</varname> and <varname>PROJ4TEXT</varname> definitions "
"for all EPSG projections."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:611
#, no-c-format
msgid "The GEOMETRY_COLUMNS View"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:613
#, no-c-format
msgid ""
"<varname>GEOMETRY_COLUMNS</varname> is a view reading from database system "
"catalog tables. Its structure is:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:616
#, no-c-format
msgid "\\d geometry_columns"
msgstr ""

#. Tag: screen
#: using_postgis_dataman.xml:617
#, no-c-format
msgid ""
"View \"public.geometry_columns\"\n"
"      Column       |          Type          | Modifiers\n"
"-------------------+------------------------+-----------\n"
" f_table_catalog   | character varying(256) |\n"
" f_table_schema    | character varying(256) |\n"
" f_table_name      | character varying(256) |\n"
" f_geometry_column | character varying(256) |\n"
" coord_dimension   | integer                |\n"
" srid              | integer                |\n"
" type              | character varying(30)  |"
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:623
#, no-c-format
msgid "F_TABLE_CATALOG, F_TABLE_SCHEMA, F_TABLE_NAME"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:626
#, no-c-format
msgid ""
"The fully qualified name of the feature table containing the geometry "
"column. Note that the terms \"catalog\" and \"schema\" are Oracle-ish. There "
"is not PostgreSQL analogue of \"catalog\" so that column is left blank -- "
"for \"schema\" the PostgreSQL schema name is used (<varname>public</varname> "
"is the default)."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:635
#, no-c-format
msgid "F_GEOMETRY_COLUMN"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:638
#, no-c-format
msgid "The name of the geometry column in the feature table."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:643
#, no-c-format
msgid "COORD_DIMENSION"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:646
#, no-c-format
msgid "The spatial dimension (2, 3 or 4 dimensional) of the column."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:655
#, no-c-format
msgid ""
"The ID of the spatial reference system used for the coordinate geometry in "
"this table. It is a foreign key reference to the <varname>SPATIAL_REF_SYS</"
"varname>."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:662
#, no-c-format
msgid "TYPE"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:665
#, no-c-format
msgid ""
"The type of the spatial object. To restrict the spatial column to a single "
"type, use one of: POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, "
"MULTIPOLYGON, GEOMETRYCOLLECTION or corresponding XYM versions POINTM, "
"LINESTRINGM, POLYGONM, MULTIPOINTM, MULTILINESTRINGM, MULTIPOLYGONM, "
"GEOMETRYCOLLECTIONM. For heterogeneous (mixed-type) collections, you can use "
"\"GEOMETRY\" as the type."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:674
#, no-c-format
msgid ""
"This attribute is (probably) not part of the OpenGIS specification, but is "
"required for ensuring type homogeneity."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:684
#, no-c-format
msgid "Creating a Spatial Table"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:686
#, no-c-format
msgid ""
"Creating a table with spatial data, can be done in one step. As shown in the "
"following example which creates a roads table with a 2D linestring geometry "
"column in WGS84 long lat"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:688
#, no-c-format
msgid ""
"CREATE TABLE ROADS (ID serial, ROAD_NAME text, geom "
"geometry(LINESTRING,4326) );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:690
#, no-c-format
msgid ""
"We can add additional columns using standard ALTER TABLE command as we do in "
"this next example where we add a 3-D linestring."
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:691
#, no-c-format
msgid "ALTER TABLE roads ADD COLUMN geom2 geometry(LINESTRINGZ,4326);"
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:695
#, no-c-format
msgid "Manually Registering Geometry Columns"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:697
#, no-c-format
msgid ""
"Two of the cases where you may need this are the case of SQL Views and bulk "
"inserts. For bulk insert case, you can correct the registration in the "
"geometry_columns table by constraining the column or doing an alter table. "
"For views, you could expose using a CAST operation. Note, if your column is "
"typmod based, the creation process would register it correctly, so no need "
"to do anything. Also views that have no spatial function applied to the "
"geometry will register the same as the underlying table geometry column."
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:702
#, no-c-format
msgid ""
"-- Lets say you have a view created like this\n"
"CREATE VIEW public.vwmytablemercator AS\n"
"        SELECT gid, ST_Transform(geom, 3395) As geom, f_name\n"
"        FROM public.mytable;\n"
"\n"
"-- For it to register correctly\n"
"-- You need to cast the geometry\n"
"--\n"
"DROP VIEW public.vwmytablemercator;\n"
"CREATE VIEW  public.vwmytablemercator AS\n"
"        SELECT gid, ST_Transform(geom, 3395)::geometry(Geometry, 3395) As "
"geom, f_name\n"
"        FROM public.mytable;\n"
"\n"
"-- If you know the geometry type for sure is a 2D POLYGON then you could do\n"
"DROP VIEW public.vwmytablemercator;\n"
"CREATE VIEW  public.vwmytablemercator AS\n"
"        SELECT gid, ST_Transform(geom,3395)::geometry(Polygon, 3395) As "
"geom, f_name\n"
"        FROM public.mytable;"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:703
#, no-c-format
msgid ""
"--Lets say you created a derivative table by doing a bulk insert\n"
"SELECT poi.gid, poi.geom, citybounds.city_name\n"
"INTO myschema.my_special_pois\n"
"FROM poi INNER JOIN citybounds ON ST_Intersects(citybounds.geom, poi.geom);\n"
"\n"
"-- Create 2D index on new table\n"
"CREATE INDEX idx_myschema_myspecialpois_geom_gist\n"
"  ON myschema.my_special_pois USING gist(geom);\n"
"\n"
"-- If your points are 3D points or 3M points,\n"
"-- then you might want to create an nd index instead of a 2D index\n"
"CREATE INDEX my_special_pois_geom_gist_nd\n"
"        ON my_special_pois USING gist(geom gist_geometry_ops_nd);\n"
"\n"
"-- To manually register this new table's geometry column in "
"geometry_columns.\n"
"-- Note it will also change the underlying structure of the table to\n"
"-- to make the column typmod based.\n"
"SELECT populate_geometry_columns('myschema.my_special_pois'::regclass);\n"
"\n"
"-- If you are using PostGIS 2.0 and for whatever reason, you\n"
"-- you need the constraint based definition behavior\n"
"-- (such as case of inherited tables where all children do not have the same "
"type and srid)\n"
"-- set optional use_typmod argument to false\n"
"SELECT populate_geometry_columns('myschema.my_special_pois'::regclass, "
"false);"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:705
#, no-c-format
msgid ""
"Although the old-constraint based method is still supported, a constraint-"
"based geometry column used directly in a view, will not register correctly "
"in geometry_columns, as will a typmod one. In this example we define a "
"column using typmod and another using constraints."
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:708
#, no-c-format
msgid ""
"CREATE TABLE pois_ny(gid SERIAL PRIMARY KEY, poi_name text, cat text, geom "
"geometry(POINT,4326));\n"
"SELECT AddGeometryColumn('pois_ny', 'geom_2160', 2160, 'POINT', 2, false);"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:709
#, no-c-format
msgid "If we run in psql"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:710
#, no-c-format
msgid "\\d pois_ny;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:711
#, no-c-format
msgid ""
"We observe they are defined differently -- one is typmod, one is constraint"
msgstr ""

#. Tag: screen
#: using_postgis_dataman.xml:712
#, no-c-format
msgid ""
"Table \"public.pois_ny\"\n"
"  Column   |         Type          |                       Modifiers\n"
"\n"
"-----------+-----------------------"
"+------------------------------------------------------\n"
" gid       | integer               | not null default "
"nextval('pois_ny_gid_seq'::regclass)\n"
" poi_name  | text                  |\n"
" cat       | character varying(20) |\n"
" geom      | geometry(Point,4326)  |\n"
" geom_2160 | geometry              |\n"
"Indexes:\n"
"    \"pois_ny_pkey\" PRIMARY KEY, btree (gid)\n"
"Check constraints:\n"
"    \"enforce_dims_geom_2160\" CHECK (st_ndims(geom_2160) = 2)\n"
"    \"enforce_geotype_geom_2160\" CHECK (geometrytype(geom_2160) = 'POINT'::"
"text\n"
"        OR geom_2160 IS NULL)\n"
"    \"enforce_srid_geom_2160\" CHECK (st_srid(geom_2160) = 2160)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:713
#, no-c-format
msgid "In geometry_columns, they both register correctly"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:714
#, no-c-format
msgid ""
"SELECT f_table_name, f_geometry_column, srid, type\n"
"        FROM geometry_columns\n"
"        WHERE f_table_name = 'pois_ny';"
msgstr ""

#. Tag: screen
#: using_postgis_dataman.xml:715
#, no-c-format
msgid ""
"f_table_name | f_geometry_column | srid | type\n"
"-------------+-------------------+------+-------\n"
"pois_ny      | geom              | 4326 | POINT\n"
"pois_ny      | geom_2160         | 2160 | POINT"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:716
#, no-c-format
msgid "However -- if we were to create a view like this"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:717
#, no-c-format
msgid ""
"CREATE VIEW vw_pois_ny_parks AS\n"
"SELECT *\n"
"  FROM pois_ny\n"
"  WHERE cat='park';\n"
"\n"
"SELECT f_table_name, f_geometry_column, srid, type\n"
"        FROM geometry_columns\n"
"        WHERE f_table_name = 'vw_pois_ny_parks';"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:718
#, no-c-format
msgid ""
"The typmod based geom view column registers correctly, but the constraint "
"based one does not."
msgstr ""

#. Tag: screen
#: using_postgis_dataman.xml:720
#, no-c-format
msgid ""
"f_table_name   | f_geometry_column | srid |   type\n"
"------------------+-------------------+------+----------\n"
" vw_pois_ny_parks | geom              | 4326 | POINT\n"
" vw_pois_ny_parks | geom_2160         |    0 | GEOMETRY"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:722
#, no-c-format
msgid ""
"This may change in future versions of PostGIS, but for now to force the "
"constraint-based view column to register correctly, you need to do this:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:724
#, no-c-format
msgid ""
"DROP VIEW vw_pois_ny_parks;\n"
"CREATE VIEW vw_pois_ny_parks AS\n"
"SELECT gid, poi_name, cat,\n"
"  geom,\n"
"  geom_2160::geometry(POINT,2160) As geom_2160\n"
"  FROM pois_ny\n"
"  WHERE cat = 'park';\n"
"SELECT f_table_name, f_geometry_column, srid, type\n"
"        FROM geometry_columns\n"
"        WHERE f_table_name = 'vw_pois_ny_parks';"
msgstr ""

#. Tag: screen
#: using_postgis_dataman.xml:725
#, no-c-format
msgid ""
"f_table_name   | f_geometry_column | srid | type\n"
"------------------+-------------------+------+-------\n"
" vw_pois_ny_parks | geom              | 4326 | POINT\n"
" vw_pois_ny_parks | geom_2160         | 2160 | POINT"
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:730
#, no-c-format
msgid "Geometry Validation"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:732
#, no-c-format
msgid ""
"PostGIS is compliant with the Open Geospatial Consortium’s (OGC) OpenGIS "
"Specifications. As such, many PostGIS methods require, or more accurately, "
"assume that geometries that are operated on are both simple and valid. For "
"example, it does not make sense to calculate the area of a polygon that has "
"a hole defined outside of the polygon, or to construct a polygon from a non-"
"simple boundary line."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:739
#, no-c-format
msgid ""
"According to the OGC Specifications, a <emphasis>simple</emphasis> geometry "
"is one that has no anomalous geometric points, such as self intersection or "
"self tangency and primarily refers to 0 or 1-dimensional geometries (i.e. "
"<varname>[MULTI]POINT, [MULTI]LINESTRING</varname>). Geometry validity, on "
"the other hand, primarily refers to 2-dimensional geometries (i.e. "
"<varname>[MULTI]POLYGON)</varname> and defines the set of assertions that "
"characterizes a valid polygon. The description of each geometric class "
"includes specific conditions that further detail geometric simplicity and "
"validity."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:749
#, no-c-format
msgid ""
"A <varname>POINT</varname> is inherently <emphasis>simple</emphasis> as a 0-"
"dimensional geometry object."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:752
#, no-c-format
msgid ""
"<varname>MULTIPOINT</varname>s are <emphasis>simple</emphasis> if no two "
"coordinates (<varname>POINT</varname>s) are equal (have identical coordinate "
"values)."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:756
#, no-c-format
msgid ""
"A <varname>LINESTRING</varname> is <emphasis>simple</emphasis> if it does "
"not pass through the same <varname>POINT</varname> twice (except for the "
"endpoints, in which case it is referred to as a linear ring and additionally "
"considered closed)."
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:771
#, no-c-format
msgid "<emphasis>(a)</emphasis>"
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:781
#, no-c-format
msgid "<emphasis>(b)</emphasis>"
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:793
#, no-c-format
msgid "<emphasis>(c)</emphasis>"
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:803
#, no-c-format
msgid "<emphasis>(d)</emphasis>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:813
#, no-c-format
msgid ""
"<emphasis role=\"bold\">(a)</emphasis> and <emphasis role=\"bold\">(c)</"
"emphasis> are simple <varname>LINESTRING</varname>s, <emphasis role=\"bold"
"\">(b)</emphasis> and <emphasis role=\"bold\">(d)</emphasis> are not."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:822
#, no-c-format
msgid ""
"A <varname>MULTILINESTRING</varname> is <emphasis>simple</emphasis> only if "
"all of its elements are simple and the only intersection between any two "
"elements occurs at <varname>POINT</varname>s that are on the boundaries of "
"both elements."
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:837
#, no-c-format
msgid "<emphasis>(e)</emphasis>"
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:847
#, no-c-format
msgid "<emphasis>(f)</emphasis>"
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:857
#, no-c-format
msgid "<emphasis>(g)</emphasis>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:867
#, no-c-format
msgid ""
"<emphasis role=\"bold\">(e)</emphasis> and <emphasis role=\"bold\">(f)</"
"emphasis> are simple <varname>MULTILINESTRING</varname>s, <emphasis role="
"\"bold\">(g)</emphasis> is not."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:876
#, no-c-format
msgid ""
"By definition, a <varname>POLYGON</varname> is always <emphasis>simple</"
"emphasis>. It is <emphasis>valid</emphasis> if no two rings in the boundary "
"(made up of an exterior ring and interior rings) cross. The boundary of a "
"<varname>POLYGON</varname> may intersect at a <varname>POINT</varname> but "
"only as a tangent (i.e. not on a line). A <varname>POLYGON</varname> may not "
"have cut lines or spikes and the interior rings must be contained entirely "
"within the exterior ring."
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:894
#, no-c-format
msgid "<emphasis>(h)</emphasis>"
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:904
#, no-c-format
msgid "<emphasis>(i)</emphasis>"
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:914
#, no-c-format
msgid "<emphasis>(j)</emphasis>"
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:926
#, no-c-format
msgid "<emphasis>(k)</emphasis>"
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:936
#, no-c-format
msgid "<emphasis>(l)</emphasis>"
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:946
#, no-c-format
msgid "<emphasis>(m)</emphasis>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:955
#, no-c-format
msgid ""
"<emphasis role=\"bold\">(h)</emphasis> and <emphasis role=\"bold\">(i)</"
"emphasis> are valid <varname>POLYGON</varname>s, <emphasis role=\"bold\">(j-"
"m)</emphasis> cannot be represented as single <varname>POLYGON</varname>s, "
"but <emphasis role=\"bold\">(j)</emphasis> and <emphasis role=\"bold\">(m)</"
"emphasis> could be represented as a valid <varname>MULTIPOLYGON</varname>."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:967
#, no-c-format
msgid ""
"A <varname>MULTIPOLYGON</varname> is <emphasis>valid</emphasis> if and only "
"if all of its elements are valid and the interiors of no two elements "
"intersect. The boundaries of any two elements may touch, but only at a "
"finite number of <varname>POINT</varname>s."
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:982
#, no-c-format
msgid "<emphasis>(n)</emphasis>"
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:992
#, no-c-format
msgid "<emphasis>(o)</emphasis>"
msgstr ""

#. Tag: emphasis
#: using_postgis_dataman.xml:1002
#, no-c-format
msgid "<emphasis>(p)</emphasis>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1011
#, no-c-format
msgid ""
"<emphasis role=\"bold\">(n)</emphasis> and <emphasis role=\"bold\">(o)</"
"emphasis> are not valid <varname>MULTIPOLYGON</varname>s. <emphasis role="
"\"bold\">(p)</emphasis>, however, is valid."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1020
#, no-c-format
msgid ""
"Most of the functions implemented by the GEOS library rely on the assumption "
"that your geometries are valid as specified by the OpenGIS Simple Feature "
"Specification. To check simplicity or validity of geometries you can use the "
"<link linkend=\"ST_IsSimple\">ST_IsSimple()</link> and <link linkend="
"\"ST_IsValid\">ST_IsValid()</link>"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1026
#, no-c-format
msgid ""
"-- Typically, it doesn't make sense to check\n"
"-- for validity on linear features since it will always return TRUE.\n"
"-- But in this example, PostGIS extends the definition of the OGC IsValid\n"
"-- by returning false if a LineString has less than 2 *distinct* vertices.\n"
"gisdb=# SELECT\n"
"   ST_IsValid('LINESTRING(0 0, 1 1)'),\n"
"   ST_IsValid('LINESTRING(0 0, 0 0, 0 0)');\n"
"\n"
" st_isvalid | st_isvalid\n"
"------------+-----------\n"
"      t     |     f"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1028
#, no-c-format
msgid ""
"By default, PostGIS does not apply this validity check on geometry input, "
"because testing for validity needs lots of CPU time for complex geometries, "
"especially polygons. If you do not trust your data sources, you can manually "
"enforce such a check to your tables by adding a check constraint:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1034
#, no-c-format
msgid ""
"ALTER TABLE mytable\n"
"  ADD CONSTRAINT geometry_valid_check\n"
"        CHECK (ST_IsValid(the_geom));"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1036
#, no-c-format
msgid ""
"If you encounter any strange error messages such as \"GEOS Intersection() "
"threw an error!\" when calling PostGIS functions with valid input "
"geometries, you likely found an error in either PostGIS or one of the "
"libraries it uses, and you should contact the PostGIS developers. The same "
"is true if a PostGIS function returns an invalid geometry for valid input."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1044
#, no-c-format
msgid ""
"Strictly compliant OGC geometries cannot have Z or M values. The <link "
"linkend=\"ST_IsValid\">ST_IsValid()</link> function won't consider higher "
"dimensioned geometries invalid! Invocations of <link linkend="
"\"AddGeometryColumn\">AddGeometryColumn()</link> will add a constraint "
"checking geometry dimensions, so it is enough to specify 2 there."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:1054
#, no-c-format
msgid "Loading Spatial Data"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1056
#, no-c-format
msgid ""
"Once you have created a spatial table, you are ready to upload spatial data "
"to the database. There are two built-in ways to get spatial data into a "
"PostGIS/PostgreSQL database: using formatted SQL statements or using the "
"Shapefile loader."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:1062
#, no-c-format
msgid "Using SQL to Load Data"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1064
#, no-c-format
msgid ""
"If spatial data can be converted to a text representation (as either WKT or "
"WKB), then using SQL might be the easiest way to get data into PostGIS. Data "
"can be bulk-loaded into PostGIS/PostgreSQL by loading a text file of SQL "
"<code>INSERT</code> statements using the <code>psql</code> SQL utility."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1069
#, no-c-format
msgid ""
"A SQL load file (<filename>roads.sql</filename> for example) might look like "
"this:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1072
#, no-c-format
msgid ""
"BEGIN;\n"
"INSERT INTO roads (road_id, roads_geom, road_name)\n"
"  VALUES (1,'LINESTRING(191232 243118,191108 243242)','Jeff Rd');\n"
"INSERT INTO roads (road_id, roads_geom, road_name)\n"
"  VALUES (2,'LINESTRING(189141 244158,189265 244817)','Geordie Rd');\n"
"INSERT INTO roads (road_id, roads_geom, road_name)\n"
"  VALUES (3,'LINESTRING(192783 228138,192612 229814)','Paul St');\n"
"INSERT INTO roads (road_id, roads_geom, road_name)\n"
"  VALUES (4,'LINESTRING(189412 252431,189631 259122)','Graeme Ave');\n"
"INSERT INTO roads (road_id, roads_geom, road_name)\n"
"  VALUES (5,'LINESTRING(190131 224148,190871 228134)','Phil Tce');\n"
"INSERT INTO roads (road_id, roads_geom, road_name)\n"
"  VALUES (6,'LINESTRING(198231 263418,198213 268322)','Dave Cres');\n"
"COMMIT;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1074
#, no-c-format
msgid "The SQL file can be loaded into PostgreSQL using <code>psql</code>:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1076
#, no-c-format
msgid "psql -d [database] -f roads.sql"
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:1080
#, no-c-format
msgid "Using the Shapefile Loader"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1082
#, no-c-format
msgid ""
"The <filename>shp2pgsql</filename> data loader converts Shapefiles into SQL "
"suitable for insertion into a PostGIS/PostgreSQL database either in geometry "
"or geography format. The loader has several operating modes selected by "
"command line flags."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1087
#, no-c-format
msgid ""
"There is also a <filename>shp2pgsql-gui</filename> graphical interface with "
"most of the options as the command-line loader. This may be easier to use "
"for one-off non-scripted loading or if you are new to PostGIS. It can also "
"be configured as a plugin to PgAdminIII."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1095
#, no-c-format
msgid "(c|a|d|p) These are mutually exclusive options:"
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1100
#, no-c-format
msgid "<term>-c</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1102
#, no-c-format
msgid ""
"Creates a new table and populates it from the Shapefile. <emphasis>This is "
"the default mode.</emphasis>"
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1110
#, no-c-format
msgid "<term>-a</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1112
#, no-c-format
msgid ""
"Appends data from the Shapefile into the database table. Note that to use "
"this option to load multiple files, the files must have the same attributes "
"and same data types."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1121
#, no-c-format
msgid "<term>-d</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1123
#, no-c-format
msgid ""
"Drops the database table before creating a new table with the data in the "
"Shapefile."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1130
#, no-c-format
msgid "<term>-p</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1132
#, no-c-format
msgid ""
"Only produces the table creation SQL code, without adding any actual data. "
"This can be used if you need to completely separate the table creation and "
"data loading steps."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1145
#, no-c-format
msgid "<term>-?</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1147
#, no-c-format
msgid "Display help screen."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1154
#, no-c-format
msgid "<term>-D</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1156
#, no-c-format
msgid ""
"Use the PostgreSQL \"dump\" format for the output data. This can be combined "
"with -a, -c and -d. It is much faster to load than the default \"insert\" "
"SQL format. Use this for very large data sets."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1165
#, no-c-format
msgid "-s [&lt;FROM_SRID&gt;:]&lt;SRID&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1167
#, no-c-format
msgid ""
"Creates and populates the geometry tables with the specified SRID. "
"Optionally specifies that the input shapefile uses the given FROM_SRID, in "
"which case the geometries will be reprojected to the target SRID."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1177
#, no-c-format
msgid "<term>-k</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1179
#, no-c-format
msgid ""
"Keep identifiers' case (column, schema and attributes). Note that attributes "
"in Shapefile are all UPPERCASE."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1187
#, no-c-format
msgid "<term>-i</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1189
#, no-c-format
msgid ""
"Coerce all integers to standard 32-bit integers, do not create 64-bit "
"bigints, even if the DBF header signature appears to warrant it."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1197
#, no-c-format
msgid "<term>-I</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1199
#, no-c-format
msgid "Create a GiST index on the geometry column."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1206
#, no-c-format
msgid "<term>-m</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1208
#, no-c-format
msgid ""
"-m <filename>a_file_name</filename> Specify a file containing a set of "
"mappings of (long) column names to 10 character DBF column names. The "
"content of the file is one or more lines of two names separated by white "
"space and no trailing or leading space. For example:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1213
#, no-c-format
msgid ""
"COLUMNNAME DBFFIELD1\n"
"AVERYLONGCOLUMNNAME DBFFIELD2"
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1219
#, no-c-format
msgid "<term>-S</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1221
#, no-c-format
msgid ""
"Generate simple geometries instead of MULTI geometries. Will only succeed if "
"all the geometries are actually single (I.E. a MULTIPOLYGON with a single "
"shell, or or a MULTIPOINT with a single vertex)."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1230
#, no-c-format
msgid "-t &lt;dimensionality&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1232
#, no-c-format
msgid ""
"Force the output geometry to have the specified dimensionality. Use the "
"following strings to indicate the dimensionality: 2D, 3DZ, 3DM, 4D."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1236
#, no-c-format
msgid ""
"If the input has fewer dimensions that specified, the output will have those "
"dimensions filled in with zeroes. If the input has more dimensions that "
"specified, the unwanted dimensions will be stripped."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1245
#, no-c-format
msgid "<term>-w</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1247
#, no-c-format
msgid ""
"Output WKT format, instead of WKB. Note that this can introduce coordinate "
"drifts due to loss of precision."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1255
#, no-c-format
msgid "<term>-e</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1257
#, no-c-format
msgid ""
"Execute each statement on its own, without using a transaction. This allows "
"loading of the majority of good data when there are some bad geometries that "
"generate errors. Note that this cannot be used with the -D flag as the \"dump"
"\" format always uses a transaction."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1267
#, no-c-format
msgid "-W &lt;encoding&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1269
#, no-c-format
msgid ""
"Specify encoding of the input data (dbf file). When used, all attributes of "
"the dbf are converted from the specified encoding to UTF8. The resulting SQL "
"output will contain a <code>SET CLIENT_ENCODING to UTF8</code> command, so "
"that the backend will be able to reconvert from UTF8 to whatever encoding "
"the database is configured to use internally."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1279
#, no-c-format
msgid "-N &lt;policy&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1281
#, no-c-format
msgid "NULL geometries handling policy (insert*,skip,abort)"
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1287
#, no-c-format
msgid "<term>-n</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1289
#, no-c-format
msgid ""
"-n Only import DBF file. If your data has no corresponding shapefile, it "
"will automatically switch to this mode and load just the dbf. So setting "
"this flag is only needed if you have a full shapefile set, and you only want "
"the attribute data and no geometry."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1297
#, no-c-format
msgid "<term>-G</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1299
#, no-c-format
msgid ""
"Use geography type instead of geometry (requires lon/lat data) in WGS84 long "
"lat (SRID=4326)"
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1305
#, no-c-format
msgid "-T &lt;tablespace&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1307
#, no-c-format
msgid ""
"Specify the tablespace for the new table. Indexes will still use the default "
"tablespace unless the -X parameter is also used. The PostgreSQL "
"documentation has a good description on when to use custom tablespaces."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1315
#, no-c-format
msgid "-X &lt;tablespace&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1317
#, no-c-format
msgid ""
"Specify the tablespace for the new table's indexes. This applies to the "
"primary key index, and the GIST spatial index if -I is also used."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1325
#, no-c-format
msgid ""
"An example session using the loader to create an input file and loading it "
"might look like this:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1330
#, no-c-format
msgid ""
"# shp2pgsql -c -D -s 4269 -i -I shaperoads.shp myschema.roadstable &gt; "
"roads.sql\n"
"# psql -d roadsdb -f roads.sql"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1332
#, no-c-format
msgid "A conversion and load can be done in one step using UNIX pipes:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1336
#, no-c-format
msgid "# shp2pgsql shaperoads.shp myschema.roadstable | psql -d roadsdb"
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:1341
#, no-c-format
msgid "Extracting Spatial Data"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1343
#, no-c-format
msgid ""
"Spatial data can be extracted from the database using either SQL or the "
"Shapefile dumper. The section on SQL presents some of the functions "
"available to do comparisons and queries on spatial tables."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:1349
#, no-c-format
msgid "Using SQL to Extract Data"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1351
#, no-c-format
msgid ""
"The most straightforward way of extracting spatial data out of the database "
"is to use a SQL <code>SELECT</code> query to define the data set to be "
"extracted and dump the resulting columns into a parsable text file:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1356
#, no-c-format
msgid ""
"db=# SELECT road_id, ST_AsText(road_geom) AS geom, road_name FROM roads;\n"
"\n"
"road_id | geom                                    | road_name\n"
"--------+-----------------------------------------+-----------\n"
"          1 | LINESTRING(191232 243118,191108 243242) | Jeff Rd\n"
"          2 | LINESTRING(189141 244158,189265 244817) | Geordie Rd\n"
"          3 | LINESTRING(192783 228138,192612 229814) | Paul St\n"
"          4 | LINESTRING(189412 252431,189631 259122) | Graeme Ave\n"
"          5 | LINESTRING(190131 224148,190871 228134) | Phil Tce\n"
"          6 | LINESTRING(198231 263418,198213 268322) | Dave Cres\n"
"          7 | LINESTRING(218421 284121,224123 241231) | Chris Way\n"
"(6 rows)"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1358
#, no-c-format
msgid ""
"There will be times when some kind of restriction is necessary to cut down "
"the number of records returned. In the case of attribute-based restrictions, "
"use the same SQL syntax as used with a non-spatial table. In the case of "
"spatial restrictions, the following functions are useful:"
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1366
#, no-c-format
msgid "ST_Intersects"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1369
#, no-c-format
msgid "This function tells whether two geometries share any space."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1374
#, no-c-format
msgid "<term>=</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1377
#, no-c-format
msgid ""
"This tests whether two geometries are geometrically identical. For example, "
"if 'POLYGON((0 0,1 1,1 0,0 0))' is the same as 'POLYGON((0 0,1 1,1 0,0 "
"0))' (it is)."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1385
#, no-c-format
msgid ""
"Next, you can use these operators in queries. Note that when specifying "
"geometries and boxes on the SQL command line, you must explicitly turn the "
"string representations into geometries function. The 312 is a fictitious "
"spatial reference system that matches our data. So, for example:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1391
#, no-c-format
msgid ""
"SELECT road_id, road_name\n"
"  FROM roads\n"
"  WHERE roads_geom='SRID=312;LINESTRING(191232 243118,191108 243242)'::"
"geometry;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1393
#, no-c-format
msgid ""
"The above query would return the single record from the \"ROADS_GEOM\" table "
"in which the geometry was equal to that value."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1396
#, no-c-format
msgid ""
"To check whether some of the roads passes in the area defined by a polygon:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1398
#, no-c-format
msgid ""
"SELECT road_id, road_name\n"
"FROM roads\n"
"WHERE ST_Intersects(roads_geom, 'SRID=312;POLYGON((...))');"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1402
#, no-c-format
msgid ""
"The most common spatial query will probably be a \"frame-based\" query, used "
"by client software, like data browsers and web mappers, to grab a \"map frame"
"\" worth of data for display."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1405
#, no-c-format
msgid ""
"When using the \"&amp;&amp;\" operator, you can specify either a BOX3D as "
"the comparison feature or a GEOMETRY. When you specify a GEOMETRY, however, "
"its bounding box will be used for the comparison."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1409
#, no-c-format
msgid "Using a \"BOX3D\" object for the frame, such a query looks like this:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1411
#, no-c-format
msgid ""
"SELECT ST_AsText(roads_geom) AS geom\n"
"FROM roads\n"
"WHERE\n"
"  roads_geom &amp;&amp; ST_MakeEnvelope(191232, 243117,191232, 243119,312);"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1413
#, no-c-format
msgid ""
"Note the use of the SRID 312, to specify the projection of the envelope."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:1419
#, no-c-format
msgid "Using the Shapefile Dumper"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1421
#, no-c-format
msgid ""
"The <filename>pgsql2shp</filename> table dumper connects to the database and "
"converts a table (possibly defined by a query) into a shape file. The basic "
"syntax is:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1425
#, no-c-format
msgid ""
"pgsql2shp [&lt;options&gt;] &lt;database&gt; [&lt;schema&gt;.]&lt;table&gt;"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1427
#, no-c-format
msgid "pgsql2shp [&lt;options&gt;] &lt;database&gt; &lt;query&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1429
#, no-c-format
msgid "The commandline options are:"
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1433
#, no-c-format
msgid "-f &lt;filename&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1436
#, no-c-format
msgid "Write the output to a particular filename."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1441
#, no-c-format
msgid "-h &lt;host&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1444
#, no-c-format
msgid "The database host to connect to."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1449
#, no-c-format
msgid "-p &lt;port&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1452
#, no-c-format
msgid "The port to connect to on the database host."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1457
#, no-c-format
msgid "-P &lt;password&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1460
#, no-c-format
msgid "The password to use when connecting to the database."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1465
#, no-c-format
msgid "-u &lt;user&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1468
#, no-c-format
msgid "The username to use when connecting to the database."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1473
#, no-c-format
msgid "-g &lt;geometry column&gt;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1476
#, no-c-format
msgid ""
"In the case of tables with multiple geometry columns, the geometry column to "
"use when writing the shape file."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1482
#, no-c-format
msgid "<term>-b</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1485
#, no-c-format
msgid ""
"Use a binary cursor. This will make the operation faster, but will not work "
"if any NON-geometry attribute in the table lacks a cast to text."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1492
#, no-c-format
msgid "<term>-r</term>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1495
#, no-c-format
msgid ""
"Raw mode. Do not drop the <varname>gid</varname> field, or escape column "
"names."
msgstr ""

#. Tag: term
#: using_postgis_dataman.xml:1501
#, no-c-format
msgid "-m <varname>filename</varname>"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1503
#, no-c-format
msgid ""
"Remap identifiers to ten character names. The content of the file is lines "
"of two symbols separated by a single white space and no trailing or leading "
"space: VERYLONGSYMBOL SHORTONE ANOTHERVERYLONGSYMBOL SHORTER etc."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:1516
#, no-c-format
msgid "Building Spatial Indexes"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1518
#, no-c-format
msgid ""
"Indexes make using a spatial database for large data sets possible. Without "
"indexing, a search for features would require a sequential scan of every "
"record in the database. Indexing speeds up searching by organizing the data "
"into a structure which can be quickly traversed to find records."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1524
#, no-c-format
msgid ""
"The B-tree index method commonly used for attribute data is not very useful "
"for spatial data, since it only supports storing and querying data in a "
"single dimension. Data such as geometry which has 2 or more dimensions) "
"requires an index method that supports range query across all the data "
"dimensions. (That said, it is possible to effectively index so-called XY "
"data using a B-tree and explict range searches.) One of the main advantages "
"of PostgreSQL for spatial data handling is that it offers several kinds of "
"indexes which work well for multi-dimensional data: GiST, BRIN and SP-GiST "
"indexes."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1536
#, no-c-format
msgid ""
"<emphasis role=\"bold\">GiST (Generalized Search Tree)</emphasis> indexes "
"break up data into \"things to one side\", \"things which overlap\", "
"\"things which are inside\" and can be used on a wide range of data-types, "
"including GIS data. PostGIS uses an R-Tree index implemented on top of GiST "
"to index spatial data. GiST is the most commonly-used and versatile spatial "
"index method, and offers very good query performance."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1546
#, no-c-format
msgid ""
"<emphasis role=\"bold\">BRIN (Block Range Index)</emphasis> indexes operate "
"by summarizing the spatial extent of ranges of table records. Search is done "
"via a scan of the ranges. BRIN is only appropriate for use for some kinds of "
"data (spatially sorted, with infrequent or no update). But it provides much "
"faster index create time, and much smaller index size."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1556
#, no-c-format
msgid ""
"<emphasis role=\"bold\">SP-GiST (Space-Partitioned Generalized Search Tree)</"
"emphasis> is a generic index method that supports partitioned search trees "
"such as quad-trees, k-d trees, and radix trees (tries)."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1563
#, no-c-format
msgid ""
"For more information see the <ulink url=\"https://postgis.net/workshops/"
"postgis-intro/indexing.html\">PostGIS Workshop</ulink>, and the <ulink url="
"\"https://www.postgresql.org/docs/current/indexes.html\">PostgreSQL "
"documentation</ulink>."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:1569
#, no-c-format
msgid "GiST Indexes"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1571
#, no-c-format
msgid ""
"GiST stands for \"Generalized Search Tree\" and is a generic form of "
"indexing. In addition to GIS indexing, GiST is used to speed up searches on "
"all kinds of irregular data structures (integer arrays, spectral data, etc) "
"which are not amenable to normal B-Tree indexing."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1576
#, no-c-format
msgid ""
"Once a GIS data table exceeds a few thousand rows, you will want to build an "
"index to speed up spatial searches of the data (unless all your searches are "
"based on attributes, in which case you'll want to build a normal index on "
"the attribute fields)."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1581
#, no-c-format
msgid ""
"The syntax for building a GiST index on a \"geometry\" column is as follows:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1585
#, no-c-format
msgid "CREATE INDEX [indexname] ON [tablename] USING GIST ( [geometryfield] );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1587
#, no-c-format
msgid ""
"The above syntax will always build a 2D-index. To get the an n-dimensional "
"index for the geometry type, you can create one using this syntax:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1588
#, no-c-format
msgid ""
"CREATE INDEX [indexname] ON [tablename] USING GIST ([geometryfield] "
"gist_geometry_ops_nd);"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1590
#, no-c-format
msgid ""
"Building a spatial index is a computationally intensive exercise. It also "
"blocks write access to your table for the time it creates, so on a "
"production system you may want to do in in a slower CONCURRENTLY-aware way:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1591
#, no-c-format
msgid ""
"CREATE INDEX CONCURRENTLY [indexname] ON [tablename] USING GIST "
"( [geometryfield] );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1593 using_postgis_dataman.xml:1761
#, no-c-format
msgid ""
"After building an index, it is sometimes helpful to force PostgreSQL to "
"collect table statistics, which are used to optimize query plans:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1596 using_postgis_dataman.xml:1764
#, no-c-format
msgid "VACUUM ANALYZE [table_name] [(column_name)];"
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:1601
#, no-c-format
msgid "BRIN Indexes"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1603
#, no-c-format
msgid ""
"BRIN stands for \"Block Range Index\". It is an general-purpose <ulink url="
"\"https://www.postgresql.org/docs/current/brin.html\">index method</ulink> "
"introduced in PostgreSQL 9.5. BRIN is a <emphasis>lossy</emphasis> index "
"method, meaning that a a secondary check is required to confirm that a "
"record matches a given search condition (which is the case for all provided "
"spatial indexes). It provides much faster index creation and much smaller "
"index size, with reasonable read performance. Its primary purpose is to "
"support indexing very large tables on columns which have a correlation with "
"their physical location within the table. In addition to spatial indexing, "
"BRIN can speed up searches on various kinds of attribute data structures "
"(integer, arrays etc)."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1617
#, no-c-format
msgid ""
"Once a spatial table exceeds a few thousand rows, you will want to build an "
"index to speed up spatial searches of the data. GiST indexes are very "
"performant as long as their size doesn't exceed the amount of RAM available "
"for the database, and as long as you can afford the index storage size, and "
"the cost of index update on write. Otherwise, for very large tables BRIN "
"index can be considered as an alternative."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1624
#, no-c-format
msgid ""
"A BRIN index stores the bounding box enclosing all the geometries contained "
"in the rows in a contiguous set of table blocks, called a <emphasis>block "
"range</emphasis>. When executing a query using the index the block ranges "
"are scanned to find the ones that intersect the query extent. This is "
"efficient only if the data is physically ordered so that the bounding boxes "
"for block ranges have minimal overlap (and ideally are mutually exclusive). "
"The resulting index is very small in size, but is typically less performant "
"for read than a GiST index over the same data."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1634
#, no-c-format
msgid ""
"Building a BRIN index is much less CPU-intensive than building a GiST index. "
"It's common to find that a BRIN index is ten times faster to build than a "
"GiST index over the same data. And because a BRIN index stores only one "
"bounding box for each range of table blocks, it's common to use up to a "
"thousand times less disk space than a GiST index."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1640
#, no-c-format
msgid ""
"You can choose the number of blocks to summarize in a range. If you decrease "
"this number, the index will be bigger but will probably provide better "
"performance."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1644
#, no-c-format
msgid ""
"For BRIN to be effective, the table data should be stored in a physical "
"order which minimizes the amount of block extent overlap. It may be that the "
"data is already sorted appropriately (for instance, if it is loaded from "
"another dataset that is already sorted in spatial order). Otherwise, this "
"can be accomplished by sorting the data by a one-dimensional spatial key. "
"One way to do this is to create a new table sorted by the geometry values "
"(which in recent PostGIS versions uses an efficient Hilbert curve ordering):"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1653
#, no-c-format
msgid ""
"CREATE TABLE table_sorted AS\n"
"   SELECT * FROM table  ORDER BY geom;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1655
#, no-c-format
msgid ""
"Alternatively, data can be sorted in-place by using a GeoHash as a "
"(temporary) index, and clustering on that index:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1659
#, no-c-format
msgid ""
"CREATE INDEX idx_temp_geohash ON table\n"
"    USING btree (ST_GeoHash( ST_Transform( geom, 4326 ), 20));\n"
"CLUSTER table USING idx_temp_geohash;"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1662
#, no-c-format
msgid ""
"The syntax for building a BRIN index on a <code>geometry</code> column is:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1664
#, no-c-format
msgid "CREATE INDEX [indexname] ON [tablename] USING BRIN ( [geome_col] );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1666
#, no-c-format
msgid ""
"The above syntax builds a 2D index. To build a 3D-dimensional index, use "
"this syntax:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1668
#, no-c-format
msgid ""
"CREATE INDEX [indexname] ON [tablename]\n"
"    USING BRIN ([geome_col] brin_geometry_inclusion_ops_3d);"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1670
#, no-c-format
msgid "You can also get a 4D-dimensional index using the 4D operator class:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1672
#, no-c-format
msgid ""
"CREATE INDEX [indexname] ON [tablename]\n"
"    USING BRIN ([geome_col] brin_geometry_inclusion_ops_4d);"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1674
#, no-c-format
msgid ""
"The above commands use the default number of blocks in a range, which is "
"128. To specify the number of blocks to summarise in a range, use this syntax"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1677
#, no-c-format
msgid ""
"CREATE INDEX [indexname] ON [tablename]\n"
"    USING BRIN ( [geome_col] ) WITH (pages_per_range = [number]);"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1679
#, no-c-format
msgid ""
"Keep in mind that a BRIN index only stores one index entry for a large "
"number of rows. If your table stores geometries with a mixed number of "
"dimensions, it's likely that the resulting index will have poor performance. "
"You can avoid this performance penalty by choosing the operator class with "
"the least number of dimensions of the stored geometries"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1687
#, no-c-format
msgid ""
"The <code>geography</code> datatype is supported for BRIN indexing. The "
"syntax for building a BRIN index on a geography column is:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1690
#, no-c-format
msgid "CREATE INDEX [indexname] ON [tablename] USING BRIN ( [geog_col] );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1692
#, no-c-format
msgid ""
"The above syntax builds a 2D-index for geospatial objects on the spheroid."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1694
#, no-c-format
msgid ""
"Currently, only \"inclusion support\" is provided, meaning that just the "
"<varname>&amp;&amp;</varname>, <varname>~</varname> and <varname>@</varname> "
"operators can be used for the 2D cases (for both <code>geometry</code> and "
"<code>geography</code>), and just the <varname>&amp;&amp;&amp;</varname> "
"operator for 3D geometries. There is currently no support for kNN searches."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1701
#, no-c-format
msgid ""
"An important difference between BRIN and other index types is that the "
"database does not maintain the index dynamically. Changes to spatial data in "
"the table are simply appended to the end of the index. This will cause index "
"search performance to degrade over time. The index can be updated by "
"performing a <code>VACUUM</code>, or by using a special function "
"<code>brin_summarize_new_values(regclass)</code>. For this reason BRIN may "
"be most appropriate for use with data that is read-only, or only rarely "
"changing. For more information refer to the <ulink url=\"https://www."
"postgresql.org/docs/current/brin-intro.html#BRIN-OPERATION\">manual</ulink>."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1711
#, no-c-format
msgid "To summarize using BRIN for spatial data:"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1715
#, no-c-format
msgid "Index build time is very fast, and index size is very small."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1716
#, no-c-format
msgid "Index query time is slower than GiST, but can still be very acceptable."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1717
#, no-c-format
msgid "Requires table data to be sorted in a spatial ordering."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1718
#, no-c-format
msgid "Requires manual index maintenance."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1719
#, no-c-format
msgid ""
"Most appropriate for very large tables, with low or no overlap (e.g. "
"points), and which are static or change infrequently."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:1727
#, no-c-format
msgid "SP-GiST Indexes"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1729
#, no-c-format
msgid ""
"SP-GiST stands for \"Space-Partitioned Generalized Search Tree\" and is a "
"generic form of indexing that supports partitioned search trees, such as "
"quad-trees, k-d trees, and radix trees (tries). The common feature of these "
"data structures is that they repeatedly divide the search space into "
"partitions that need not be of equal size. In addition to GIS indexing, SP-"
"GiST is used to speed up searches on many kinds of data, such as phone "
"routing, ip routing, substring search, etc."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1737
#, no-c-format
msgid ""
"As it is the case for GiST indexes, SP-GiST indexes are lossy, in the sense "
"that they store the bounding box enclosing spatial objects. SP-GiST indexes "
"can be considered as an alternative to GiST indexes. The performance tests "
"reveal that SP-GiST indexes are especially beneficial when there are many "
"overlapping objects, that is, with so-called “spaghetti data”."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1744
#, no-c-format
msgid ""
"Once a GIS data table exceeds a few thousand rows, an SP-GiST index may be "
"used to speed up spatial searches of the data. The syntax for building an SP-"
"GiST index on a \"geometry\" column is as follows:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1748
#, no-c-format
msgid ""
"CREATE INDEX [indexname] ON [tablename] USING SPGIST ( [geometryfield] );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1750
#, no-c-format
msgid ""
"The above syntax will build a 2-dimensional index. A 3-dimensional index for "
"the geometry type can be created using the 3D operator class:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1753
#, no-c-format
msgid ""
"CREATE INDEX [indexname] ON [tablename] USING SPGIST ([geometryfield] "
"spgist_geometry_ops_3d);"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1755
#, no-c-format
msgid ""
"Building a spatial index is a computationally intensive operation. It also "
"blocks write access to your table for the time it creates, so on a "
"production system you may want to do in in a slower CONCURRENTLY-aware way:"
msgstr ""

#. Tag: programlisting
#: using_postgis_dataman.xml:1759
#, no-c-format
msgid ""
"CREATE INDEX CONCURRENTLY [indexname] ON [tablename] USING SPGIST "
"( [geometryfield] );"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1766
#, no-c-format
msgid ""
"An SP-GiST index can accelerate queries involving the following operators:"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1768
#, no-c-format
msgid ""
"&lt;&lt;, &amp;&lt;, &amp;&gt;, &gt;&gt;, &lt;&lt;|, &amp;&lt;|, |&amp;&gt;, "
"|&gt;&gt;, &amp;&amp;, @&gt;, &lt;@, and ~=, for 2-dimensional indexes,"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1769
#, no-c-format
msgid "&amp;/&amp;, ~==, @&gt;&gt;, and &lt;&lt;@, for 3-dimensional indexes."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1771
#, no-c-format
msgid "There is no support for kNN searches at the moment."
msgstr ""

#. Tag: title
#: using_postgis_dataman.xml:1774
#, no-c-format
msgid "Using Indexes"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1776
#, no-c-format
msgid ""
"Ordinarily, indexes invisibly speed up data access: once the index is built, "
"the PostgreSQL query planner automatically decides when to use index "
"information to speed up a query plan. Unfortunately, the query planner "
"sometimes does not optimize the use of GiST indexes, so queries end up using "
"slow sequential scans instead of a spatial index."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1782
#, no-c-format
msgid ""
"If you find your spatial indexes are not being used, there are a couple "
"things you can do:"
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1787
#, no-c-format
msgid ""
"Examine the query plan and check your query actually computes the thing you "
"need. An erroneous JOIN, either forgotten or to the wrong table, can "
"unexpectedly retrieve table records multiple times. To get the query plan, "
"execute with <code>EXPLAIN</code> in front of the query."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1794
#, no-c-format
msgid ""
"Make sure statistics are gathered about the number and distributions of "
"values in a table, to provide the query planner with better information to "
"make decisions around index usage. <command>VACUUM ANALYZE</command> will "
"compute both."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1799
#, no-c-format
msgid ""
"You should regularly vacuum your databases anyways - many PostgreSQL DBAs "
"have <command>VACUUM</command> run as an off-peak cron job on a regular "
"basis."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1804
#, no-c-format
msgid ""
"If vacuuming does not help, you can temporarily force the planner to use the "
"index information by using the <command>set enable_seqscan to off;</command> "
"command. This way you can check whether planner is at all capable to "
"generate an index accelerated query plan for your query. You should only use "
"this command only for debug: generally speaking, the planner knows better "
"than you do about when to use indexes. Once you have run your query, do not "
"forget to set <varname>ENABLE_SEQSCAN</varname> back on, so that other "
"queries will utilize the planner as normal."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1816
#, no-c-format
msgid ""
"If <command>set enable_seqscan to off;</command> helps your query to run, "
"your Postgres is likely not tuned for your hardware. If you find the planner "
"wrong about the cost of sequential vs index scans try reducing the value of "
"<varname>random_page_cost</varname> in postgresql.conf or using <command>set "
"random_page_cost to 1.1;</command>. Default value for the parameter is 4, "
"try setting it to 1 (on SSD) or 2 (on fast magnetic disks). Decreasing the "
"value makes the planner more inclined of using Index scans."
msgstr ""

#. Tag: para
#: using_postgis_dataman.xml:1826
#, no-c-format
msgid ""
"If <command>set enable_seqscan to off;</command> does not help your query, "
"the query may be using a SQL construct that the Postgres planner is not yet "
"able to optimize. It may be possible to rewrite the query in a way that the "
"planner is able to handle. For example, a subquery with an inline SELECT may "
"not produce an efficient plan, but could possibly be rewritten using a "
"LATERAL JOIN."
msgstr ""
